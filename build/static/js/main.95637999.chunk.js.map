{"version":3,"sources":["services/noteService.js","components/Note.js","App.js","serviceWorker.js","index.js"],"names":["url","noteService","axios","get","concat","newnote","post","id","put","delete","App","_ref","content","important","putImportant","deleteNote","react_default","a","createElement","onClick","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","input","setInput","_useState5","_useState6","setImportant","_useState7","_useState8","showImportant","setShowImportant","_useState9","_useState10","error","setError","useEffect","getNotes","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","sent","data","stop","apply","this","arguments","_ref2","_callee2","_context2","_x","_ref3","_callee3","_context3","_x2","notesToMap","filter","note","importantClass","className","setTimeout","map","_ref4","Note","key","onSubmit","e","preventDefault","length","_ref5","_callee4","_context4","_x3","postNote","onChange","target","value","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95637999.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst url = 'http://localhost:3001';\r\n\r\nconst getNotes = () => axios.get(`${url}/api/notes`);\r\n\r\nconst postNote = newnote => axios.post(`${url}/api/notes`, newnote);\r\nconst putNote = id => axios.put(`${url}/notes/${id}`);\r\nconst delNote = id => axios.delete(`${url}/notes/${id}`);\r\n\r\nexport default {\r\n  getNotes,\r\n  postNote,\r\n  putNote,\r\n  delNote\r\n};\r\n","import React from 'react';\r\n\r\nconst App = ({ id, content, important, putImportant, deleteNote }) => {\r\n  return (\r\n    <li onClick={() => putImportant(id)}>\r\n      {id}: {content} {important ? '(!)' : ''}\r\n      <button onClick={() => deleteNote(id)}>X</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.sass';\nimport noteService from './services/noteService';\nimport Note from './components/Note';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [input, setInput] = useState('');\n  const [important, setImportant] = useState(true);\n  const [showImportant, setShowImportant] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // console.log(typeof notes);\n    getNotes();\n  }, []);\n\n  const getNotes = async () => {\n    const res = await noteService.getNotes();\n    setNotes(res.data);\n  };\n  const putImportant = async id => {\n    setError('puterror');\n    await noteService.putNote(id);\n    getNotes();\n  };\n  const deleteNote = async id => {\n    await noteService.delNote(id);\n    getNotes();\n  };\n\n  const mapNotes = () =>\n    notesToMap.map(({ id, content, important }) => (\n      <Note\n        id={id}\n        key={id}\n        content={content}\n        important={important}\n        putImportant={putImportant}\n        deleteNote={deleteNote}\n      />\n    ));\n  const notesToMap = showImportant\n    ? notes\n    : notes.filter(note => note.important);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // if (!input) {\n    //   return;\n    // }\n    const newnote = {\n      content: input,\n      id: notes.length + 1,\n      important\n    };\n    const postNote = async newnote => {\n      await noteService.postNote(newnote);\n      getNotes();\n    };\n    postNote(newnote);\n    setInput('');\n  };\n\n  const inputChange = input => {\n    setInput(input.target.value);\n  };\n  const setImportance = () => {\n    setImportant(!important);\n  };\n  const filterImportant = () => {\n    setShowImportant(!showImportant);\n  };\n\n  const showErrorMessage = () => {\n    if (!error) {\n      return null;\n    } else if (error) {\n      setTimeout(() => {\n        setError(null);\n      }, 2500);\n      return error;\n    }\n  };\n\n  const importantClass = important ? 'important' : '';\n  return (\n    <div className='App'>\n      <p>{showErrorMessage()}</p>\n      <h1>Notes</h1>\n      <ul>{mapNotes()}</ul>\n      <form onSubmit={handleSubmit}>\n        <input onChange={inputChange} value={input} />\n        <button onClick={setImportance} className={`button ${importantClass}`}>\n          !\n        </button>\n        <button type='submit'>Add Note</button>\n      </form>\n      <button onClick={filterImportant}>Show Important</button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}